// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(CICRequestContext))]
    [Migration("20230720064313_NonWorkingDay Added")]
    partial class NonWorkingDayAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "3E-Agis"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "3E dəstək"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Call Center"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "azkob.az"
                        },
                        new
                        {
                            Id = (short)5,
                            Name = "cic web site"
                        },
                        new
                        {
                            Id = (short)6,
                            Name = "Azeriqaz sms"
                        },
                        new
                        {
                            Id = (short)7,
                            Name = "ailem.socar.az"
                        },
                        new
                        {
                            Id = (short)8,
                            Name = "Asan web service"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.CategoryUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint");

                    b.Property<bool>("CreatePermisson")
                        .HasColumnType("bit");

                    b.Property<bool>("ExecutePermisson")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("CategoryUsers");
                });

            modelBuilder.Entity("Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CFileId")
                        .IsUnique()
                        .HasFilter("[CFileId] IS NOT NULL");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Entities.Concrete.Contact", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contact");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Email"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "Phone"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "SOLMAN"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "Request"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileOriginalName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Entities.Concrete.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("UserId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("Entities.Concrete.NonWorkingDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("NonWorkingDays");
                });

            modelBuilder.Entity("Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.Priority", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Priorities");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Low"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Hard"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<short>("CategoryId")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<short>("PriorityId")
                        .HasColumnType("smallint");

                    b.Property<int?>("RFileId")
                        .HasColumnType("int");

                    b.Property<short>("RequestTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<short>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)1);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("PriorityId");

                    b.HasIndex("RFileId")
                        .IsUnique()
                        .HasFilter("[RFileId] IS NOT NULL");

                    b.HasIndex("RequestTypeId");

                    b.HasIndex("SenderId");

                    b.HasIndex("StatusId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = (short)3,
                            Date = new DateTime(2023, 7, 20, 10, 43, 12, 879, DateTimeKind.Local).AddTicks(7154),
                            PriorityId = (short)1,
                            RequestTypeId = (short)5,
                            SenderId = 1,
                            StatusId = (short)2,
                            Text = "email test edilme isi",
                            Title = "#email Test"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = (short)2,
                            Date = new DateTime(2023, 7, 20, 10, 43, 12, 879, DateTimeKind.Local).AddTicks(7162),
                            ExecutorId = 1,
                            PriorityId = (short)3,
                            RequestTypeId = (short)2,
                            SenderId = 3,
                            StatusId = (short)1,
                            Text = "odenislerin silinmesi emeliyyati",
                            Title = "Odenislerin silinmesi"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = (short)4,
                            Date = new DateTime(2023, 7, 20, 10, 43, 12, 879, DateTimeKind.Local).AddTicks(7164),
                            ExecutorId = 2,
                            PriorityId = (short)2,
                            RequestTypeId = (short)5,
                            SenderId = 3,
                            StatusId = (short)1,
                            Text = "odenislerin arasdirilimasi emeliyyati",
                            Title = "Odenislerin arasdirilimasi"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = (short)5,
                            Date = new DateTime(2023, 7, 20, 10, 43, 12, 879, DateTimeKind.Local).AddTicks(7165),
                            PriorityId = (short)2,
                            RequestTypeId = (short)7,
                            SenderId = 2,
                            StatusId = (short)3,
                            Text = "email egov emeliyyati",
                            Title = "email egov"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = (short)4,
                            Date = new DateTime(2023, 7, 20, 10, 43, 12, 879, DateTimeKind.Local).AddTicks(7165),
                            ExecutorId = 3,
                            PriorityId = (short)2,
                            RequestTypeId = (short)3,
                            SenderId = 1,
                            StatusId = (short)3,
                            Text = "muqavile emeliyyati",
                            Title = "muqavile"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.RequestInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("ContactId")
                        .HasColumnType("smallint");

                    b.Property<double?>("ExecutionTime")
                        .HasColumnType("float");

                    b.Property<double?>("PlannedExecutionTime")
                        .HasColumnType("float");

                    b.Property<int?>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("RequestSender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RootCause")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Rountine")
                        .HasColumnType("bit");

                    b.Property<string>("SolmanRequestNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Solution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("TypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("RequestId")
                        .IsUnique()
                        .HasFilter("[RequestId] IS NOT NULL");

                    b.HasIndex("TypeId");

                    b.ToTable("RequestInfo");
                });

            modelBuilder.Entity("Entities.Concrete.RequestType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RequestTypes");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "App Change"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "App Issue"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "App New Requirement"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "Change the Report"
                        },
                        new
                        {
                            Id = (short)5,
                            Name = "Create Custom Report"
                        },
                        new
                        {
                            Id = (short)6,
                            Name = "Create New Report"
                        },
                        new
                        {
                            Id = (short)7,
                            Name = "Incident"
                        },
                        new
                        {
                            Id = (short)8,
                            Name = "Master Data Change"
                        },
                        new
                        {
                            Id = (short)9,
                            Name = "Service Request"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Status", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Açıq"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "İcrada"
                        },
                        new
                        {
                            Id = (short)3,
                            Name = "Qapalı"
                        },
                        new
                        {
                            Id = (short)4,
                            Name = "Təsdiqləndi"
                        },
                        new
                        {
                            Id = (short)5,
                            Name = "İmtina edildi"
                        },
                        new
                        {
                            Id = (short)6,
                            Name = "Gözləmədə"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.Type", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Type");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Name = "Application Maintenance"
                        },
                        new
                        {
                            Id = (short)2,
                            Name = "Application Development"
                        });
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("InnerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("MobilPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("NotificationPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varbinary(500)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique()
                        .HasFilter("[ImageId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.CategoryUser", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany("CategoryUsers")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("CategoryUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.Comment", b =>
                {
                    b.HasOne("Entities.Concrete.File", "File")
                        .WithOne("Comment")
                        .HasForeignKey("Entities.Concrete.Comment", "CFileId");

                    b.HasOne("Entities.Concrete.Request", "Request")
                        .WithMany("Comments")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.History", b =>
                {
                    b.HasOne("Entities.Concrete.Request", "Request")
                        .WithMany("Histories")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.Request", b =>
                {
                    b.HasOne("Entities.Concrete.Category", "Category")
                        .WithMany("Requests")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "Executor")
                        .WithMany("ExecutorRequests")
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entities.Concrete.Priority", "Priority")
                        .WithMany("Requests")
                        .HasForeignKey("PriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.File", "File")
                        .WithOne("Request")
                        .HasForeignKey("Entities.Concrete.Request", "RFileId");

                    b.HasOne("Entities.Concrete.RequestType", "RequestType")
                        .WithMany("Requests")
                        .HasForeignKey("RequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "Sender")
                        .WithMany("SenderRequests")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Entities.Concrete.Status", "Status")
                        .WithMany("Requests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Executor");

                    b.Navigation("File");

                    b.Navigation("Priority");

                    b.Navigation("RequestType");

                    b.Navigation("Sender");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Entities.Concrete.RequestInfo", b =>
                {
                    b.HasOne("Entities.Concrete.Contact", "Contact")
                        .WithMany("RequestInfos")
                        .HasForeignKey("ContactId");

                    b.HasOne("Entities.Concrete.Request", "Request")
                        .WithOne("RequestInfo")
                        .HasForeignKey("Entities.Concrete.RequestInfo", "RequestId");

                    b.HasOne("Entities.Concrete.Type", "Type")
                        .WithMany("RequestInfos")
                        .HasForeignKey("TypeId");

                    b.Navigation("Contact");

                    b.Navigation("Request");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.HasOne("Entities.Concrete.File", "File")
                        .WithOne("User")
                        .HasForeignKey("Entities.Concrete.User", "ImageId");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Entities.Concrete.UserOperationClaim", b =>
                {
                    b.HasOne("Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Concrete.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Concrete.Category", b =>
                {
                    b.Navigation("CategoryUsers");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Concrete.Contact", b =>
                {
                    b.Navigation("RequestInfos");
                });

            modelBuilder.Entity("Entities.Concrete.File", b =>
                {
                    b.Navigation("Comment")
                        .IsRequired();

                    b.Navigation("Request")
                        .IsRequired();

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Entities.Concrete.Priority", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Concrete.Request", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Histories");

                    b.Navigation("RequestInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Concrete.RequestType", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Concrete.Status", b =>
                {
                    b.Navigation("Requests");
                });

            modelBuilder.Entity("Entities.Concrete.Type", b =>
                {
                    b.Navigation("RequestInfos");
                });

            modelBuilder.Entity("Entities.Concrete.User", b =>
                {
                    b.Navigation("CategoryUsers");

                    b.Navigation("Comments");

                    b.Navigation("ExecutorRequests");

                    b.Navigation("Histories");

                    b.Navigation("SenderRequests");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
